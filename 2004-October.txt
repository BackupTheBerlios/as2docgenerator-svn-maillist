From klaut at sheep.berlios.de  Sat Oct  2 18:04:14 2004
From: klaut at sheep.berlios.de (Tanja Pislar at BerliOS)
Date: Sat, 2 Oct 2004 18:04:14 +0200
Subject: [As2docgenerator-svn] r3 - trunk/documentation
Message-ID: <200410021604.i92G4ETG010388@sheep.berlios.de>

Author: klaut
Date: 2004-10-02 18:04:13 +0200 (Sat, 02 Oct 2004)
New Revision: 3

Added:
   trunk/documentation/as2docgenerator.mm
Log:
started writting down (actually, branching out ;)) possible solutions for the xml class model.

Added: trunk/documentation/as2docgenerator.mm
===================================================================
--- trunk/documentation/as2docgenerator.mm	2004-07-27 21:02:26 UTC (rev 2)
+++ trunk/documentation/as2docgenerator.mm	2004-10-02 16:04:13 UTC (rev 3)
@@ -0,0 +1,62 @@
+<map version="0.7.1">
+<node COLOR="#006633" TEXT="as2docgenerator">
+<node COLOR="#006633" TEXT="xml Class model" POSITION="right">
+<edge WIDTH="thin"/>
+<cloud COLOR="#fce3e3"/>
+<font NAME="SansSerif" SIZE="12"/>
+<icon BUILTIN="pencil"/>
+<node TEXT="class" STYLE="bubble">
+<node TEXT="attr. type (interface|class)" STYLE="fork"/>
+<node TEXT="attr. name" STYLE="fork"/>
+<node TEXT="attr. version" STYLE="fork"/>
+<node TEXT="attr. package" STYLE="fork"/>
+<node TEXT="attr. author" STYLE="fork"/>
+<node COLOR="#000000" TEXT="properties" STYLE="bubble">
+<node TEXT="property">
+<node TEXT="attr. visibility" STYLE="fork"/>
+<node TEXT="attr. type" STYLE="fork"/>
+<node TEXT="attr. name" STYLE="fork"/>
+</node>
+</node>
+<node TEXT="methods">
+<node TEXT="method">
+<node TEXT="attr. name" STYLE="fork"/>
+<node TEXT="attr. visibility" STYLE="fork"/>
+<node TEXT="attr. returnType" STYLE="fork"/>
+<node TEXT="params">
+<node TEXT="param">
+<node TEXT="attr. type" STYLE="fork"/>
+<node TEXT="attr. name" STYLE="fork"/>
+</node>
+</node>
+<node TEXT="description"/>
+</node>
+</node>
+<node TEXT="description"/>
+<node TEXT="detailed_description"/>
+</node>
+</node>
+<node TEXT="documentation keywords" POSITION="left">
+<icon BUILTIN="xmag"/>
+<node TEXT="class related">
+<icon BUILTIN="pencil"/>
+<node TEXT="@name"/>
+<node TEXT="@version"/>
+<node TEXT="@author"/>
+<node TEXT="@property"/>
+<node TEXT="@see"/>
+</node>
+<node TEXT="methods">
+<icon BUILTIN="pencil"/>
+<node TEXT="@param"/>
+<node TEXT="@see"/>
+</node>
+<node TEXT="documentation starts with /** and ends with **/&#xa;documentation must be placed ABOVE the &#xa;method/class/interface in question&#xa;---&#xa;probably a good idea to keep the special keywords&#xa;to the minimum.. description, for example, should not&#xa;require a separate @description keyword, it is the text &#xa;right after /** and lasts until the first empty line.&#xa;Example:&#xa;/**&#xa;this is some description&#xa;and this is too&#xa;&#xa;@param firstParam&#xa;**/">
+<icon BUILTIN="pencil"/>
+</node>
+</node>
+<node COLOR="#990000" TEXT="process xmlClassModel with XSL" POSITION="right">
+<icon BUILTIN="xmag"/>
+</node>
+</node>
+</map>



From klaut at sheep.berlios.de  Sun Oct  3 08:04:00 2004
From: klaut at sheep.berlios.de (Tanja Pislar at BerliOS)
Date: Sun, 3 Oct 2004 08:04:00 +0200
Subject: [As2docgenerator-svn] r4 - in trunk: dev documentation
Message-ID: <200410030604.i93640Ka010684@sheep.berlios.de>

Author: klaut
Date: 2004-10-03 08:03:58 +0200 (Sun, 03 Oct 2004)
New Revision: 4

Added:
   trunk/documentation/SampleClass.as
   trunk/documentation/SampleClass_doc.html
Removed:
   trunk/dev/SampleClass.as
   trunk/dev/SampleClass_doc.html
Modified:
   trunk/dev/AS2docGenerator.py
   trunk/documentation/as2docgenerator.mm
Log:
moved SampleClass.as and SampleClass_doc.html to documentation folder.
set up optparse in AS2docGenerator.py

Modified: trunk/dev/AS2docGenerator.py
===================================================================
--- trunk/dev/AS2docGenerator.py	2004-10-02 16:04:13 UTC (rev 3)
+++ trunk/dev/AS2docGenerator.py	2004-10-03 06:03:58 UTC (rev 4)
@@ -1,6 +1,6 @@
 #######################################################################
 #AS2docGenerator - documentation generator for actionscript2 classes
-#Copyright (C) Tanja Pislar
+#Copyright (C) Tanja Pislar contact: klaut at klaustrofobik.org
 #
 #This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 #
@@ -13,9 +13,12 @@
 import os
 import stat
 import string
+import getopt
+from optparse import OptionParser
 
 import core.ASparser.ASparser as ASparser
 import core.DocOutput.htmlDocOutput as htmlDocOutput
+import core.DocOutput.FlashDocOutput as FlashDocOutput
 
 #this function found on http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/161542
 def walktree (top, depthfirst = True):
@@ -36,72 +39,102 @@
 
 class AS2docGenerator:
 	def __init__ (self, filename, newFile):
-		self.version = "AS2docGenerator beta 0.5.3"
+		self.version = "AS2docGenerator beta 0.5.4"
 		self.newFilename = newFile
 		self.ASparser = ASparser.ASparser(filename)
 		self.documentation = self.ASparser.parse()
 
-	def writeDoc (self, theType = "html"):
+	def writeDoc (self, theType = "html", bookName="flashdocs"):
 		if theType=="html":
 			theGenerator =htmlDocOutput.HTMLdocGenerator(self.documentation)
+			theGenerator.generateDoc(self.version, self.newFilename)
+		elif theType=="flashdoc":
+			theGenerator =  FlashDocOutput.FLASHdocGenerator(self.documentation)
+			theGenerator.generateDoc(bookName)
 
-		theGenerator.generateDoc(self.version, self.newFilename)
 
 
+
 if __name__=='__main__':
 
+	# parsing option arguments
+	usage = """usage: %prog [options] arg1 [arg2,..]
+	type %prog -h for help"""
 
-	# ideas for the next revision:
-	# -d(dir) dirName -o(output) outputFormat(html|flashdoc|xml) -b(book name for flashdoc) bookName -i(input) .as files or directory of .as files
-	# example 1:
-	# AS2docGenerator.exe -d myDir -o flashdoc -b myClasses class1.as class2.as class3.as
-	# example 2:
-	# AS2docGenerator.exe -d myDir -o html -i classesDir
-	end = ".html"
-	o = sys.argv[1]
-	if os.path.isdir(o):
+	version ="%prog beta-0.5.4"
+	parser = OptionParser(usage=usage, version=version)
+	parser.add_option("-o", "--out", dest="output", default="html",
+                  help="""the output format of the documentation 
+						options: html|flashdoc""")
 
+	(options, args) = parser.parse_args()
 
-		d = os.getcwd()
-		ndir = os.path.join(d, '_docs')
-		if not os.path.exists(ndir):
-			os.makedirs(ndir)
+	if len(args) == 0:
+		print parser.error("incorrect number of arguments")
 
-		for (basepath, children) in walktree(o):
-			for child in children:
-				print os.path.join(basepath, child)
-				f = os.path.join(basepath, child)
+	else:
+		
+		if options.output == "html":
+			#print args
+			print "generating html documentation..."
+			################################################
+			end = ".html"
+			o = args[0]
+			if os.path.isdir(o):
+				d = os.getcwd()
+				ndir = os.path.join(d, '_docs')
+				if not os.path.exists(ndir):
+					os.makedirs(ndir)
 
-				if os.path.isfile(f):
-					newname = os.path.basename(f)
-					ext = string.lower((os.path.splitext(f))[1])[1:]
-					if ext=="as":
-						try:
-							newname = newname[:newname.index(".")] + "_doc" + end
-							newFile = os.path.join(ndir, newname)
-							theDoc = AS2docGenerator(f, newFile)
-							theDoc.writeDoc()
-						except Exception, e:
-							print e
-							continue
+				for (basepath, children) in walktree(o):
+					for child in children:
+						print os.path.join(basepath, child)
+						f = os.path.join(basepath, child)
+
+						if os.path.isfile(f):
+							newname = os.path.basename(f)
+							ext = string.lower((os.path.splitext(f))[1])[1:]
+							if ext=="as":
+								try:
+									newname = newname[:newname.index(".")] + "_doc" + end
+									newFile = os.path.join(ndir, newname)
+									theDoc = AS2docGenerator(f, newFile)
+									theDoc.writeDoc()
+								except Exception, e:
+									print e
+									continue
 						
-							
-							
+			else:
+				fname = o
+				newname = os.path.basename(fname)
+				theDir = os.path.dirname(fname)
+				try:
+					if "." not in newname:
+						raise Exception("### ERROR: the filename provided does not seem to be a correct file name or directory.\nPlease, check the filename and try again [hint: classfile.as]")
 
-	else:
+					newname = newname[:newname.index(".")] + "_doc" + end
+					newFile = os.path.join(theDir, newname)
 
+					theDoc = AS2docGenerator(fname, newFile)
+					theDoc.writeDoc()
+				except Exception, e:
+					print e
+			################################################
+		elif options.output == "flashdoc":
+		# FINISH IT -- right now it does not work
+			print "generating flashdoc documentation... in the next revision."
+			#f = args[0]
+			#if os.path.isfile(f):
+				#newname = os.path.basename(f)
+				#ext = string.lower((os.path.splitext(f))[1])[1:]
+				#if ext=="as":
+					#try:
+						#newname = newname[:newname.index(".")]
 
-		fname = o
-		newname = os.path.basename(fname)
-		theDir = os.path.dirname(fname)
-		try:
-			if "." not in newname:
-				raise Exception("### ERROR: the filename provided does not seem to be a correct file name or directory.\nPlease, check the filename and try again [hint: classfile.as]")
 
-			newname = newname[:newname.index(".")] + "_doc" + end
-			newFile = os.path.join(theDir, newname)
-
-			theDoc = AS2docGenerator(fname, newFile)
-			theDoc.writeDoc()
-		except Exception, e:
-			print e
+	# ideas for the next revision:
+	# -d(dir) dirName -o(output) outputFormat(html|flashdoc|xml) -b(book name for flashdoc) bookName -i(input) .as files or directory of .as files
+	# example 1:
+	# AS2docGenerator.exe -d myDir -o flashdoc -b myClasses class1.as class2.as class3.as
+	# example 2:
+	# AS2docGenerator.exe -d myDir -o html -i classesDir
\ No newline at end of file

Deleted: trunk/dev/SampleClass.as
===================================================================
--- trunk/dev/SampleClass.as	2004-10-02 16:04:13 UTC (rev 3)
+++ trunk/dev/SampleClass.as	2004-10-03 06:03:58 UTC (rev 4)
@@ -1,119 +0,0 @@
-?import MYClass;
-
-/**
-* @class StringTokenizer
-* @author Joe Coder
-* @version 0.5
-* @description Implements the behaviour of Java StringTokenizer Class<p>
-*		Constructs a string tokenizer for the specified string. The
-*		characters in the <code>delim</code> argument are the delimiters
-*		for separating tokens. Delimiter characters themselves will not
-*		be treated as tokens.
-*
-*		The set of delimiters (the characters that separate tokens) may
-*		be specified either at creation time or on a per-token basis.
-*		<p>
-*		A <tt>StringTokenizer</tt> object internally maintains a current
-*		position within the string to be tokenized. Some operations advance this
-*		current position past the characters processed.<p>
-*		A token is returned by taking a substring of the string that was used to
-*		create the <tt>StringTokenizer</tt> object.
-*		<p>
-*		The following is one example of the use of the tokenizer. The code:
-*		<blockquote><pre>
-*		st:StringTokenizer  = new StringTokenizer("this is a test");
-*		while (st.hasMoreTokens()) {
-*			trace(st.nextToken());
-*		}
-*		</pre></blockquote>
-*		<p>
-*		prints the following output:
-*		<blockquote><pre>
-*		this
-*		is
-*		a
-*		test
-*		</pre></blockquote>
-* @usage   <pre>myTokenizer = new StringTokenizer(str[, delim])</pre>
-* @param   str  (String)   a string to be parsed.
-* @param   delim (String)  the delimiters.
-*/
-
-class StringTokenizer
-{
-	/**
-	* @property anotherProp
-	* @property someProp (String) Not sure what's it for.
-	* @property otherProp (Number) Not sure either. Looks nice, though.
-	*@property yetAnotherProp (Object) plain Object. really useless.
-	*/
-	private var _string:String;
-	private var _delimiters:String;
-	private var _currPosition:Number;
-	private var _newPosition:Number;
-	private var _maxPosition:Number;
-	private var _delimitersChanged:Boolean;
-
-	public function StringTokenizer(str:String, delim:String){
-		_string = str;
-		_delimiters = (delim) ? delim : " \t\n\r\f";
-		_currPosition = 0;
-		_newPosition = -1;
-		_maxPosition = _string.length;
-		_delimitersChanged = false;
-
-	}
-	/**
-	* @method hasMoreTokens
-	* @description  Tests if there are more tokens available from this tokenizer's string.
-	*		If this method returns <tt>true</tt>, then a subsequent call to
-	*		<tt>nextToken</tt> with no argument will successfully return a token.
-	* @usage <code>StringTokenizer.hasMoreTokens()</code>
-	* @returns  <code>true</code> if and only if there is at least one token
-	*          in the string after the current position; <code>false</code>
-	*          otherwise.
-	*/
-	public function hasMoreTokens():Boolean{
-		return true;
-	}
-
-	/**
-	* @method nextToken
-	* @description  Returns the next token in this string tokenizer's string. First,
-	*		the set of characters considered to be delimiters by this
-	*		<tt>StringTokenizer</tt> object is changed to be the characters in
-	*		the string <tt>delim</tt>. Then the next token in the string
-	*		after the current position is returned. The current position is
-	*		advanced beyond the recognized token.  The new delimiter set
-	*		remains the default after this call.
-	* @usage <code>StringTokenizer.nextToken(delim)</code>
-	* @param delim (String) the new delimiters.
-	* @return String - The next token after switching to the new delimiter set.
-	* @throws  NoSuchElementError  if there are no more tokens in this
-	*               tokenizer's string.
-	*/
-	public function nextToken(delim:String):String{
-		var s=new String("test");
-		if (s==undefined) {
-			throw new NoSuchElementError("no more tokens");
-		} else {
-			return s;
-		}
-	}
-	/**
-	* @method countTokens
-	* @description  Calculates the number of times that this tokenizer's
-	*		<code>nextToken</code> method can be called before it generates an
-	*		exception. The current position is not advanced.
-	* @usage <code>StringTokenizer.countTokens()</code>
-	* @returns Number - tokens remaining in the string using the current delimiter set.
-	*/
-	public function countTokens():Number{
-		var n = 1;
-		return n;
-	}
-
-	private function scanTokens(){
-	}
-
-}
\ No newline at end of file

Deleted: trunk/dev/SampleClass_doc.html
===================================================================
--- trunk/dev/SampleClass_doc.html	2004-10-02 16:04:13 UTC (rev 3)
+++ trunk/dev/SampleClass_doc.html	2004-10-03 06:03:58 UTC (rev 4)
@@ -1,169 +0,0 @@
-
-		<HTML>
-		<HEAD>
-		<TITLE>StringTokenizer  Documentation</TITLE>
-		
-		<STYLE><!--
-		HR.small{height:1px; width:100%; background:#E7BFA3; border: 0px;}
-		HR.big{height:4px; width:100%; background:#E7BFA3; border: 0px;}
-		A:hover{text-decoration: underline}
-		A{text-decoration: none; color: #993333}
-		code{font-family:monospace; font-size: 12px; color: #666666;}
-		.methodAttributesTitle{font-size: 12px; font-weight: bold; color: #7B779C}
-		.ToC{font-size: 12px; font-weight: bold; color: #993333}
-		.methodTitle{font-size: 14px; font-weight: bold; color: #993333}
-		.groupTitle{font-size: 18px; font-weight: bold; color: #993333}
-		.sectionTitle{font-size: 22px; font-weight: bold; color: #993333}
-		.majorTitle{font-size: 32px; font-weight: bold; color: #993333; padding-bottom:100px;}
-		.methodsDiv{margin-left:40px;}
-		.footer{font-size: 11px; color: #666666;}
-		body{font-family: arial,sans-serif; font-size: 12px;}
-		//--></STYLE>
-		
-		</HEAD>
-		<BODY bgColor='white'>
-		<P class='majorTitle'>StringTokenizer Documentation</P>
-		
-
-		<P><B>Author:</B> Joe Coder<BR>
-		<B>Last Modified:</B> 07/27/04 22:04:42<HR class='big'>
-
-		<P class='sectionTitle'>Summary</P>
-		<P class='ToC'>StringTokenizer interface:</P>
-		<div class='methodsDiv'><a href='#classinfo'>- description</a></div>
-<P class='ToC'>StringTokenizer Properties:</P><div class='methodsDiv'>
-<a href='#anotherProp'>- anotherProp</a><br>
-<a href='#someProp'>- someProp</a><br>
-<a href='#otherProp'>- otherProp</a><br>
-<a href='#yetAnotherProp'>- yetAnotherProp</a><br>
-</div><br>
-<P class='ToC'>StringTokenizer Methods:</P><div class='methodsDiv'>
-<a href='#hasMoreTokens'>- hasMoreTokens</a><br>
-<a href='#nextToken'>- nextToken</a><br>
-<a href='#countTokens'>- countTokens</a><br>
-</div><br>
-
-		<HR class='big'>
-		<P class='sectionTitle'><A name='classinfo'></A>StringTokenizer <I>interface</I></P>
-		<P> <span class='methodTitle'>version:</span> 0.5</P>
-		<P class="methodTitle">description:</P>
-		<P>Implements the behaviour of Java StringTokenizer Class<p>
-		Constructs a string tokenizer for the specified string. The
-		characters in the <code>delim</code> argument are the delimiters
-		for separating tokens. Delimiter characters themselves will not
-		be treated as tokens.
-
-		The set of delimiters (the characters that separate tokens) may
-		be specified either at creation time or on a per-token basis.
-		<p>
-		A <tt>StringTokenizer</tt> object internally maintains a current
-		position within the string to be tokenized. Some operations advance this
-		current position past the characters processed.<p>
-		A token is returned by taking a substring of the string that was used to
-		create the <tt>StringTokenizer</tt> object.
-		<p>
-		The following is one example of the use of the tokenizer. The code:
-		<blockquote><pre>
-		st:StringTokenizer  = new StringTokenizer("this is a test");
-		while (st.hasMoreTokens()) {
-			trace(st.nextToken());
-		}
-		</pre></blockquote>
-		<p>
-		prints the following output:
-		<blockquote><pre>
-		this
-		is
-		a
-		test
-		</pre></blockquote>
-</P>
-		<P class="methodTitle">usage:</P> <pre>myTokenizer = new StringTokenizer(str[, delim])</pre>
-
-<P> <span class='methodTitle'>parameters:</span>
-				<ul> 
-<li>  str  (String)   a string to be parsed.</li>
-<li>  delim (String)  the delimiters.</li>
-</ul>
-<p><a href='#'>back to top</a></p>
-
-			<HR class='small'>
-			<P class='groupTitle'><A name='properties'></A>StringTokenizer Properties:</P>
-			<div class='methodsDiv' >
-			
-
-				<P class='methodTitle'><A name='anotherProp'></A><u> anotherProp</u></P>
-				<P> No description provided.</P>
-
-				<P class='methodTitle'><A name='someProp'></A><u> someProp</u></P>
-				<P> (String) Not sure what's it for.</P>
-
-				<P class='methodTitle'><A name='otherProp'></A><u> otherProp</u></P>
-				<P> (Number) Not sure either. Looks nice, though.</P>
-
-				<P class='methodTitle'><A name='yetAnotherProp'></A><u> yetAnotherProp</u></P>
-				<P> (Object) plain Object. really useless.</P>
-<p><a href='#'>back to top</a></p>
-</div>
-
-			<HR class='small'>
-			<P class='groupTitle'><A name='methods'></A>StringTokenizer Methods:</P>
-			<div class='methodsDiv' >
-			
-
-				<P class='methodTitle'><A name='hasMoreTokens'></A><u> hasMoreTokens</u></P>
-				<P><span class='methodAttributesTitle'>description: </span>
-				Tests if there are more tokens available from this tokenizer's string.
-			If this method returns <tt>true</tt>, then a subsequent call to
-			<tt>nextToken</tt> with no argument will successfully return a token.
-	</P>
-				<P><span class='methodAttributesTitle'>usage:</span> <code>StringTokenizer.hasMoreTokens()</code>
-	</P>
-<P><span class='methodAttributesTitle'>returns:</span> <code>true</code> if and only if there is at least one token
-	in the string after the current position; <code>false</code>
-	otherwise.
-	</P>
-<p><a href='#'>back to top</a></p>
-
-				<P class='methodTitle'><A name='nextToken'></A><u> nextToken</u></P>
-				<P><span class='methodAttributesTitle'>description: </span>
-				Returns the next token in this string tokenizer's string. First,
-			the set of characters considered to be delimiters by this
-			<tt>StringTokenizer</tt> object is changed to be the characters in
-			the string <tt>delim</tt>. Then the next token in the string
-			after the current position is returned. The current position is
-			advanced beyond the recognized token.  The new delimiter set
-			remains the default after this call.
-	</P>
-				<P><span class='methodAttributesTitle'>usage:</span> <code>StringTokenizer.nextToken(delim)</code>
-	</P>
-<P> <span class='methodAttributesTitle'>parameters:</span><ul>
-<li>delim (String) the new delimiters.</li>
-</ul></P>
-<P> <span class='methodAttributesTitle'>throws:</span> NoSuchElementError  if there are no more tokens in this
-	tokenizer's string.
-	</P>
-<P><span class='methodAttributesTitle'>returns:</span> String - The next token after switching to the new delimiter set.
-	</P>
-<p><a href='#'>back to top</a></p>
-
-				<P class='methodTitle'><A name='countTokens'></A><u> countTokens</u></P>
-				<P><span class='methodAttributesTitle'>description: </span>
-				Calculates the number of times that this tokenizer's
-			<code>nextToken</code> method can be called before it generates an
-			exception. The current position is not advanced.
-	</P>
-				<P><span class='methodAttributesTitle'>usage:</span> <code>StringTokenizer.countTokens()</code>
-	</P>
-<P><span class='methodAttributesTitle'>returns:</span> Number - tokens remaining in the string using the current delimiter set.
-	</P>
-<p><a href='#'>back to top</a></p>
-</div>
-
-			<BR>
-			<BR>
-			<HR class='big'>
-			<span class="footer">generated with <A href='http://blog.klaustrofobik.org/' target='_blank'>AS2docGenerator beta 0.5.3</A></span>
-			</BODY>
-			</HTML>
-			

Added: trunk/documentation/SampleClass.as
===================================================================
--- trunk/documentation/SampleClass.as	2004-10-02 16:04:13 UTC (rev 3)
+++ trunk/documentation/SampleClass.as	2004-10-03 06:03:58 UTC (rev 4)
@@ -0,0 +1,119 @@
+?import MYClass;
+
+/**
+* @class StringTokenizer
+* @author Joe Coder
+* @version 0.5
+* @description Implements the behaviour of Java StringTokenizer Class<p>
+*		Constructs a string tokenizer for the specified string. The
+*		characters in the <code>delim</code> argument are the delimiters
+*		for separating tokens. Delimiter characters themselves will not
+*		be treated as tokens.
+*
+*		The set of delimiters (the characters that separate tokens) may
+*		be specified either at creation time or on a per-token basis.
+*		<p>
+*		A <tt>StringTokenizer</tt> object internally maintains a current
+*		position within the string to be tokenized. Some operations advance this
+*		current position past the characters processed.<p>
+*		A token is returned by taking a substring of the string that was used to
+*		create the <tt>StringTokenizer</tt> object.
+*		<p>
+*		The following is one example of the use of the tokenizer. The code:
+*		<blockquote><pre>
+*		st:StringTokenizer  = new StringTokenizer("this is a test");
+*		while (st.hasMoreTokens()) {
+*			trace(st.nextToken());
+*		}
+*		</pre></blockquote>
+*		<p>
+*		prints the following output:
+*		<blockquote><pre>
+*		this
+*		is
+*		a
+*		test
+*		</pre></blockquote>
+* @usage   <pre>myTokenizer = new StringTokenizer(str[, delim])</pre>
+* @param   str  (String)   a string to be parsed.
+* @param   delim (String)  the delimiters.
+*/
+
+class StringTokenizer
+{
+	/**
+	* @property anotherProp
+	* @property someProp (String) Not sure what's it for.
+	* @property otherProp (Number) Not sure either. Looks nice, though.
+	*@property yetAnotherProp (Object) plain Object. really useless.
+	*/
+	private var _string:String;
+	private var _delimiters:String;
+	private var _currPosition:Number;
+	private var _newPosition:Number;
+	private var _maxPosition:Number;
+	private var _delimitersChanged:Boolean;
+
+	public function StringTokenizer(str:String, delim:String){
+		_string = str;
+		_delimiters = (delim) ? delim : " \t\n\r\f";
+		_currPosition = 0;
+		_newPosition = -1;
+		_maxPosition = _string.length;
+		_delimitersChanged = false;
+
+	}
+	/**
+	* @method hasMoreTokens
+	* @description  Tests if there are more tokens available from this tokenizer's string.
+	*		If this method returns <tt>true</tt>, then a subsequent call to
+	*		<tt>nextToken</tt> with no argument will successfully return a token.
+	* @usage <code>StringTokenizer.hasMoreTokens()</code>
+	* @returns  <code>true</code> if and only if there is at least one token
+	*          in the string after the current position; <code>false</code>
+	*          otherwise.
+	*/
+	public function hasMoreTokens():Boolean{
+		return true;
+	}
+
+	/**
+	* @method nextToken
+	* @description  Returns the next token in this string tokenizer's string. First,
+	*		the set of characters considered to be delimiters by this
+	*		<tt>StringTokenizer</tt> object is changed to be the characters in
+	*		the string <tt>delim</tt>. Then the next token in the string
+	*		after the current position is returned. The current position is
+	*		advanced beyond the recognized token.  The new delimiter set
+	*		remains the default after this call.
+	* @usage <code>StringTokenizer.nextToken(delim)</code>
+	* @param delim (String) the new delimiters.
+	* @return String - The next token after switching to the new delimiter set.
+	* @throws  NoSuchElementError  if there are no more tokens in this
+	*               tokenizer's string.
+	*/
+	public function nextToken(delim:String):String{
+		var s=new String("test");
+		if (s==undefined) {
+			throw new NoSuchElementError("no more tokens");
+		} else {
+			return s;
+		}
+	}
+	/**
+	* @method countTokens
+	* @description  Calculates the number of times that this tokenizer's
+	*		<code>nextToken</code> method can be called before it generates an
+	*		exception. The current position is not advanced.
+	* @usage <code>StringTokenizer.countTokens()</code>
+	* @returns Number - tokens remaining in the string using the current delimiter set.
+	*/
+	public function countTokens():Number{
+		var n = 1;
+		return n;
+	}
+
+	private function scanTokens(){
+	}
+
+}
\ No newline at end of file

Added: trunk/documentation/SampleClass_doc.html
===================================================================
--- trunk/documentation/SampleClass_doc.html	2004-10-02 16:04:13 UTC (rev 3)
+++ trunk/documentation/SampleClass_doc.html	2004-10-03 06:03:58 UTC (rev 4)
@@ -0,0 +1,169 @@
+
+		<HTML>
+		<HEAD>
+		<TITLE>StringTokenizer  Documentation</TITLE>
+		
+		<STYLE><!--
+		HR.small{height:1px; width:100%; background:#E7BFA3; border: 0px;}
+		HR.big{height:4px; width:100%; background:#E7BFA3; border: 0px;}
+		A:hover{text-decoration: underline}
+		A{text-decoration: none; color: #993333}
+		code{font-family:monospace; font-size: 12px; color: #666666;}
+		.methodAttributesTitle{font-size: 12px; font-weight: bold; color: #7B779C}
+		.ToC{font-size: 12px; font-weight: bold; color: #993333}
+		.methodTitle{font-size: 14px; font-weight: bold; color: #993333}
+		.groupTitle{font-size: 18px; font-weight: bold; color: #993333}
+		.sectionTitle{font-size: 22px; font-weight: bold; color: #993333}
+		.majorTitle{font-size: 32px; font-weight: bold; color: #993333; padding-bottom:100px;}
+		.methodsDiv{margin-left:40px;}
+		.footer{font-size: 11px; color: #666666;}
+		body{font-family: arial,sans-serif; font-size: 12px;}
+		//--></STYLE>
+		
+		</HEAD>
+		<BODY bgColor='white'>
+		<P class='majorTitle'>StringTokenizer Documentation</P>
+		
+
+		<P><B>Author:</B> Joe Coder<BR>
+		<B>Last Modified:</B> 07/27/04 22:04:42<HR class='big'>
+
+		<P class='sectionTitle'>Summary</P>
+		<P class='ToC'>StringTokenizer interface:</P>
+		<div class='methodsDiv'><a href='#classinfo'>- description</a></div>
+<P class='ToC'>StringTokenizer Properties:</P><div class='methodsDiv'>
+<a href='#anotherProp'>- anotherProp</a><br>
+<a href='#someProp'>- someProp</a><br>
+<a href='#otherProp'>- otherProp</a><br>
+<a href='#yetAnotherProp'>- yetAnotherProp</a><br>
+</div><br>
+<P class='ToC'>StringTokenizer Methods:</P><div class='methodsDiv'>
+<a href='#hasMoreTokens'>- hasMoreTokens</a><br>
+<a href='#nextToken'>- nextToken</a><br>
+<a href='#countTokens'>- countTokens</a><br>
+</div><br>
+
+		<HR class='big'>
+		<P class='sectionTitle'><A name='classinfo'></A>StringTokenizer <I>interface</I></P>
+		<P> <span class='methodTitle'>version:</span> 0.5</P>
+		<P class="methodTitle">description:</P>
+		<P>Implements the behaviour of Java StringTokenizer Class<p>
+		Constructs a string tokenizer for the specified string. The
+		characters in the <code>delim</code> argument are the delimiters
+		for separating tokens. Delimiter characters themselves will not
+		be treated as tokens.
+
+		The set of delimiters (the characters that separate tokens) may
+		be specified either at creation time or on a per-token basis.
+		<p>
+		A <tt>StringTokenizer</tt> object internally maintains a current
+		position within the string to be tokenized. Some operations advance this
+		current position past the characters processed.<p>
+		A token is returned by taking a substring of the string that was used to
+		create the <tt>StringTokenizer</tt> object.
+		<p>
+		The following is one example of the use of the tokenizer. The code:
+		<blockquote><pre>
+		st:StringTokenizer  = new StringTokenizer("this is a test");
+		while (st.hasMoreTokens()) {
+			trace(st.nextToken());
+		}
+		</pre></blockquote>
+		<p>
+		prints the following output:
+		<blockquote><pre>
+		this
+		is
+		a
+		test
+		</pre></blockquote>
+</P>
+		<P class="methodTitle">usage:</P> <pre>myTokenizer = new StringTokenizer(str[, delim])</pre>
+
+<P> <span class='methodTitle'>parameters:</span>
+				<ul> 
+<li>  str  (String)   a string to be parsed.</li>
+<li>  delim (String)  the delimiters.</li>
+</ul>
+<p><a href='#'>back to top</a></p>
+
+			<HR class='small'>
+			<P class='groupTitle'><A name='properties'></A>StringTokenizer Properties:</P>
+			<div class='methodsDiv' >
+			
+
+				<P class='methodTitle'><A name='anotherProp'></A><u> anotherProp</u></P>
+				<P> No description provided.</P>
+
+				<P class='methodTitle'><A name='someProp'></A><u> someProp</u></P>
+				<P> (String) Not sure what's it for.</P>
+
+				<P class='methodTitle'><A name='otherProp'></A><u> otherProp</u></P>
+				<P> (Number) Not sure either. Looks nice, though.</P>
+
+				<P class='methodTitle'><A name='yetAnotherProp'></A><u> yetAnotherProp</u></P>
+				<P> (Object) plain Object. really useless.</P>
+<p><a href='#'>back to top</a></p>
+</div>
+
+			<HR class='small'>
+			<P class='groupTitle'><A name='methods'></A>StringTokenizer Methods:</P>
+			<div class='methodsDiv' >
+			
+
+				<P class='methodTitle'><A name='hasMoreTokens'></A><u> hasMoreTokens</u></P>
+				<P><span class='methodAttributesTitle'>description: </span>
+				Tests if there are more tokens available from this tokenizer's string.
+			If this method returns <tt>true</tt>, then a subsequent call to
+			<tt>nextToken</tt> with no argument will successfully return a token.
+	</P>
+				<P><span class='methodAttributesTitle'>usage:</span> <code>StringTokenizer.hasMoreTokens()</code>
+	</P>
+<P><span class='methodAttributesTitle'>returns:</span> <code>true</code> if and only if there is at least one token
+	in the string after the current position; <code>false</code>
+	otherwise.
+	</P>
+<p><a href='#'>back to top</a></p>
+
+				<P class='methodTitle'><A name='nextToken'></A><u> nextToken</u></P>
+				<P><span class='methodAttributesTitle'>description: </span>
+				Returns the next token in this string tokenizer's string. First,
+			the set of characters considered to be delimiters by this
+			<tt>StringTokenizer</tt> object is changed to be the characters in
+			the string <tt>delim</tt>. Then the next token in the string
+			after the current position is returned. The current position is
+			advanced beyond the recognized token.  The new delimiter set
+			remains the default after this call.
+	</P>
+				<P><span class='methodAttributesTitle'>usage:</span> <code>StringTokenizer.nextToken(delim)</code>
+	</P>
+<P> <span class='methodAttributesTitle'>parameters:</span><ul>
+<li>delim (String) the new delimiters.</li>
+</ul></P>
+<P> <span class='methodAttributesTitle'>throws:</span> NoSuchElementError  if there are no more tokens in this
+	tokenizer's string.
+	</P>
+<P><span class='methodAttributesTitle'>returns:</span> String - The next token after switching to the new delimiter set.
+	</P>
+<p><a href='#'>back to top</a></p>
+
+				<P class='methodTitle'><A name='countTokens'></A><u> countTokens</u></P>
+				<P><span class='methodAttributesTitle'>description: </span>
+				Calculates the number of times that this tokenizer's
+			<code>nextToken</code> method can be called before it generates an
+			exception. The current position is not advanced.
+	</P>
+				<P><span class='methodAttributesTitle'>usage:</span> <code>StringTokenizer.countTokens()</code>
+	</P>
+<P><span class='methodAttributesTitle'>returns:</span> Number - tokens remaining in the string using the current delimiter set.
+	</P>
+<p><a href='#'>back to top</a></p>
+</div>
+
+			<BR>
+			<BR>
+			<HR class='big'>
+			<span class="footer">generated with <A href='http://blog.klaustrofobik.org/' target='_blank'>AS2docGenerator beta 0.5.3</A></span>
+			</BODY>
+			</HTML>
+			

Modified: trunk/documentation/as2docgenerator.mm
===================================================================
--- trunk/documentation/as2docgenerator.mm	2004-10-02 16:04:13 UTC (rev 3)
+++ trunk/documentation/as2docgenerator.mm	2004-10-03 06:03:58 UTC (rev 4)
@@ -21,7 +21,8 @@
 <node TEXT="methods">
 <node TEXT="method">
 <node TEXT="attr. name" STYLE="fork"/>
-<node TEXT="attr. visibility" STYLE="fork"/>
+<node TEXT="attr. visibility (public|private)" STYLE="fork"/>
+<node TEXT="attr. modifier (static)" STYLE="fork"/>
 <node TEXT="attr. returnType" STYLE="fork"/>
 <node TEXT="params">
 <node TEXT="param">



